import 'package:test/test.dart';
import 'package:boring_flutter_project/source_gen_code__parsers/json_parsing.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  test("parses topstories.json", () {
    const jsonString =
        "[17775122,17773982,17765184,17774608,17775195,17772549,17768216,17774028,17771096,17772211,17775269,17764576,17764054,17764899,17775004,17764640,17765034,17772865,17767736,17763921,17771302,17774661,17774757,17773402,17770972,17765152,17773771,17765413,17770643,17771425,17765198,17773876,17774868,17773874,17773428,17772077,17772529,17772433,17766358,17773512,17772603,17771293,17774186,17764153,17763011,17775137,17766079,17769892,17772961,17771761,17767789,17772366,17764513,17764939,17770987,17772815,17771720,17768641,17767925,17774011,17765446,17764425,17765420,17766799,17768832,17765683,17756845,17766378,17768369,17770135,17768206,17770230,17766927,17767060,17773178,17760394,17763855,17767366,17774364,17764348,17767113,17771232,17774216,17764924,17768142,17766035,17766566,17759516,17765388,17758713,17759943,17766907,17773510,17771962,17767935,17756113,17773958,17763426,17762709,17765455,17756774,17764076,17757485,17755967,17753237,17769073,17767225,17754105,17767153,17759762,17773892,17766068,17768877,17757023,17767625,17763129,17768904,17765720,17767137,17759155,17760835,17765351,17756571,17754141,17768173,17764340,17766031,17759440,17756242,17757624,17764797,17756267,17760649,17771344,17755605,17766879,17751599,17764954,17756302,17766317,17769658,17756591,17762067,17761104,17759009,17762414,17754445,17758903,17760514,17765165,17760217,17772225,17760986,17756449,17769670,17758151,17768263,17762173,17760255,17757061,17755597,17752836,17755356,17756141,17754010,17760502,17759985,17765890,17752010,17770369,17755199,17767893,17750747,17752980,17770895,17756118,17753614,17751056,17772586,17770635,17766917,17770601,17756266,17754201,17771564,17759491,17766293,17756832,17757192,17770671,17762793,17755183,17759748,17759274,17757144,17771399,17758011,17763601,17761211,17766840,17753294,17763534,17760267,17756219,17766970,17754109,17757737,17761432,17755688,17754079,17761947,17762057,17772076,17764766,17760136,17751095,17750639,17763548,17770822,17756930,17759266,17750791,17770153,17753922,17762421,17763123,17767039,17761098,17753125,17751568,17755293,17753420,17756835,17753430,17765373,17757454,17765285,17771377,17756823,17756869,17759245,17751265,17765105,17752184,17751340,17750335,17769810,17765040,17752867,17754037,17753744,17751000,17763278,17758538,17769870,17766740,17767591,17769682,17761431,17769557,17763764,17769349,17760929,17761657,17753472,17753432,17763414,17756020,17759761,17768825,17758239,17756128,17772689,17767237,17764202,17765979,17762081,17769827,17766499,17767454,17750861,17750808,17764564,17751880,17751383,17750801,17762980,17763810,17753876,17762884,17766753,17752840,17753525,17755030,17771595,17754868,17770057,17770029,17753367,17769882,17762888,17754296,17755242,17750664,17765545,17767089,17764623,17766771,17758186,17752680,17763627,17759740,17750959,17758994,17755718,17752925,17764544,17763636,17761496,17754884,17754570,17756801,17769622,17761800,17753274,17757697,17761293,17766636,17757673,17754352,17752772,17757213,17755697,17761797,17764498,17762887,17761132,17764325,17764323,17758746,17755094,17750736,17764246,17750667,17761257,17763333,17762200,17753002,17757815,17756766,17760208,17754819,17755409,17757094,17761018,17752977,17763816,17753641,17752731,17752531,17751120,17753220,17759787,17755182,17761711,17756911,17761521,17763124,17762314,17760237,17759958,17763935,17767314,17763862,17753739,17754492,17761467,17754056,17761254,17758660,17763341,17760499,17755120,17751546,17752026,17763047,17759159,17756979,17762827,17752438,17762562,17757893,17762199,17757271,17753208,17758857,17750867,17755962,17754285,17753568,17754084,17764970,17758086,17754844,17753983,17755914,17755002,17765612,17763382,17765343,17753849,17753227,17752559,17750707,17767071,17757092,17755860,17758947,17773227,17751039,17758241,17755934,17768751,17771264,17758769,17755176,17774839,17756153,17770187,17757932,17759717,17759768,17760459,17761389,17760733,17752825,17754497,17774698]";
    expect(parseTopStories(jsonString).first, 17775122);
  });

  test("parses item.json", () {
    const jsonString =
        """{"by":"dhouston","descendants":71,"id":8863,"kids":[9224,8952,8917,8884,8887,8943,8869,8940,8908,8958,9005,8873,9671,9067,9055,8865,8881,8872,8955,10403,8903,8928,9125,8998,8901,8902,8907,8894,8870,8878,8980,8934,8876],"score":104,"time":1175714200,"title":"My YC app: Dropbox - Throw away your USB drive","type":"story","url":"http://www.getdropbox.com/u/2/screencast.html"}""";
    expect(parseArticle(jsonString).by, "dhouston");
  });

  test("parse item.json over network", () async {
    final url = 'https://hacker-news.firebaseio.com/v0/beststories.json';
    final response = await http.get(url);
    if (response.statusCode == 200) {
      List<dynamic> ids = jsonDecode(response.body);
      final url2 = 'https://hacker-news.firebaseio.com/v0/item/${ids[3]}.json';
      final response2 = await http.get(url2);
      if (response2.statusCode == 200) {
        expect(parseArticle(response2.body), isNotNull);
      }
    }
  });
}
